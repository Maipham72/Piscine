{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;\red24\green25\blue27;\red246\green247\blue249;}
{\*\expandedcolortbl;;\cssrgb\c12549\c12941\c14118;\cssrgb\c97255\c97647\c98039;}
\margl1440\margr1440\vieww24460\viewh28500\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs50 \cf0 Assignment name  : aff_z\
Expected files   : aff_z.c\
Allowed functions: write\
--------------------------------------------------------------------------------\
\
Write a program that takes a string, and displays the first 'z'\
character it encounters in it, followed by a newline. If there are no\
'z' characters in the string, the program writes 'z' followed\
by a newline. If the number of parameters is not 1, the program displays\
'z' followed by a newline.\
\
Example:\
\
$> ./aff_z "abc" | cat -e\
z$\
$> ./aff_z "dubO a POIL" | cat -e\
z$\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\tx25971\pardirnatural\partightenfactor0
\cf0 $> ./aff_z "zaz sent le poney" | cat -e\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 z$\
$> ./aff_z | cat -e\
z$\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs60 \cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs50 \cf0 \
\
Assignment name  : ft_print_numbers\
Expected files   : ft_print_numbers.c\
Allowed functions: write\
--------------------------------------------------------------------------------\
\
Write a function that displays all digits in ascending order.\
\
Your function must be declared as follows:\
\
void	ft_print_numbers(void);\
\
\
Assignment name  : fizzbuzz\
Expected files   : fizzbuzz.c\
Allowed functions: write\
--------------------------------------------------------------------------------\
\
\pard\pardeftab720\sl720\partightenfactor0

\f1\fs56 \cf2 \cb3 \expnd0\expndtw0\kerning0
Write a program that writes a sequence of numbers from 1 to 100 to the output\
standard, all separated by a newline.\
\
If the number is a multiple of 3, the program should write 'fizz' instead.\
\
If the number is a multiple of 5, the program should write 'buzz' instead.\
\
If the number is a multiple of 3 and a multiple of 5, the program must write\
'fizzbuzz' instead.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs50 \cf0 \cb1 \kerning1\expnd0\expndtw0 \
Exemple:\
\
$>./fizzbuzz\
1\
2\
fizz\
4\
buzz\
fizz\
7\
8\
fizz\
buzz\
11\
fizz\
13\
14\
fizzbuzz\
[...]\
97\
98\
fizz\
buzz\
$> \
\
\
\
Assignment name  : rev_print\
Expected files   : rev_print.c\
Allowed functions: write\
--------------------------------------------------------------------------------\
\
Write a function that takes a string and displays the string in reverse\
order followed by the newline.\
Its prototype is constructed like this : \
  char *ft_rev_print (char *str)\
It must return its argument\
\
Examples:\
\
$> ./rev_print "zaz" | cat -e\
zaz$\
$> ./rev_print "dub0 a POIL" | cat -e\
LIOP a 0bud$\
$> ./rev_print | cat -e\
$\
\
\
Assignment name  : aff_last_param\
Expected files   : aff_last_param.c\
Allowed functions: write\
--------------------------------------------------------------------------------\
\
Write a program that takes strings as arguments, and displays its last\
argument followed by a newline.\
\
If the number of arguments is less than 1, the program displays a newline.\
\
Examples:\
\
$> ./aff_last_param "zaz" "mange" "des" "chats" | cat -e\
chats$\
$> ./aff_last_param "j'aime le savon" | cat -e\
j'aime le savon$\
$> ./aff_last_param\
$\
\
\
Assignment name  : ft_strcpy\
Expected files   : ft_strcpy.c\
Allowed functions: \
--------------------------------------------------------------------------------\
\
Reproduce the behavior of the function strcpy (man strcpy).\
\
Your function must be declared as follows:\
\
char    *ft_strcpy(char *s1, char *s2);\
\
\
\
\
Assignment name  : ulstr\
Expected files   : ulstr.c\
Allowed functions: write\
--------------------------------------------------------------------------------\
\
Write a program that takes a string and reverses the case of all its letters.\
Other characters remain unchanged.\
\
You must display the result followed by a '\\n'.\
\
If the number of arguments is not 1, the program displays '\\n'.\
\
Examples :\
\
$>./ulstr "L'eSPrit nE peUt plUs pRogResSer s'Il staGne et sI peRsIsTent VAnIte et auto-justification." | cat -e\
l'EspRIT Ne PEuT PLuS PrOGrESsER S'iL STAgNE ET Si PErSiStENT vaNiTE ET AUTO-JUSTIFICATION.$\
$>./ulstr "S'enTOuRer dE sECreT eSt uN sIGnE De mAnQuE De coNNaiSSanCe.  " | cat -e\
s'ENtoUrER De SecREt EsT Un SigNe dE MaNqUe dE COnnAIssANcE.  $\
$>./ulstr "3:21 Ba  tOut  moUn ki Ka di KE m'en Ka fe fot" | cat -e\
3:21 bA  ToUT  MOuN KI kA DI ke M'EN kA FE FOT$\
$>./ulstr | cat -e\
$\
\
\
\
Assignment name  : ft_strrev\
Expected files   : ft_strrev.c\
Allowed functions: \
--------------------------------------------------------------------------------\
\
Write a function that reverses (in-place) a string.\
\
It must return its parameter.\
\
Your function must be declared as follows:\
\
char    *ft_strrev(char *str);\
Vf\
\
\
Assignment name  : ft_atoi\
Expected files   : ft_atoi.c\
Allowed functions: None\
--------------------------------------------------------------------------------\
\
Write a function that converts the string argument str to an integer (type int)\
and returns it.\
\
It works much like the standard atoi(const char *str) function, see the man.\
\
Your function must be declared as follows:\
\
int	ft_atoi(const char *str);\
\
\
\
\
Assignment name  : union\
Expected files   : union.c\
Allowed functions: write\
--------------------------------------------------------------------------------\
\
Write a program that takes two strings and displays, without doubles, the\
characters that appear in either one of the strings.\
\
The display will be in the order characters appear in the command line, and\
will be followed by a \\n.\
\
If the number of arguments is not 2, the program displays \\n.\
\
Example:\
\
$>./union zpadinton "paqefwtdjetyiytjneytjoeyjnejeyj" | cat -e\
zpadintoqefwjy$\
$>./union ddf6vewg64f gtwthgdwthdwfteewhrtag6h4ffdhsd | cat -e\
df6vewg4thras$\
$>./union "rien" "cette phrase ne cache rien" | cat -e\
rienct phas$\
$>./union | cat -e\
$\
$>\
$>./union "rien" | cat -e\
$\
$>\
\
\
Assignment name  : ft_range\
Expected files   : ft_range.c\
Allowed functions: malloc\
--------------------------------------------------------------------------------\
\
Write the following function:\
\
int     *ft_range(int start, int end);\
\
It must allocate (with malloc()) an array of integers, fill it with consecutive\
values that begin at start and end at end (Including start and end !), then\
return a pointer to the first value of the array.\
\
Examples:\
\
- With (1, 3) you will return an array containing 1, 2 and 3.\
- With (-1, 2) you will return an array containing -1, 0, 1 and 2.\
- With (0, 0) you will return an array containing 0.\
- With (0, -3) you will return an array containing 0, -1, -2 and -3.\
\
\
Assignment name  : ft_split\
Expected files   : ft_split.c\
Allowed functions: malloc\
--------------------------------------------------------------------------------\
\
Write a function that takes a string, splits it into words, and returns them as\
a NULL-terminated array of strings.\
\
A "word" is defined as a part of a string delimited either by spaces/tabs/new\
lines, or by the start/end of the string.\
\
Your function must be declared as follows:\
\
char    **ft_split(char *str);\
\
\
Assignment name  : sort_list\
Expected files   : sort_list.c\
Allowed functions: \
--------------------------------------------------------------------------------\
\
Write the following functions:\
\
t_list	*sort_list(t_list* lst, int (*cmp)(int, int));\
\
This function must sort the list given as a parameter, using the function \
pointer cmp to select the order to apply, and returns a pointer to the \
first element of the sorted list.\
\
Duplications must remain.\
\
Inputs will always be consistent.\
\
You must use the type t_list described in the file list.h \
that is provided to you. You must include that file \
(#include "list.h"), but you must not turn it in. We will use our own \
to compile your assignment.\
\
Functions passed as cmp will always return a value different from \
0 if a and b are in the right order, 0 otherwise.\
\
For example, the following function used as cmp will sort the list \
in ascending order:\
\
int ascending(int a, int b)\
\{\
	return (a <= b);\
\}\
\
Assignment name  : count_alpha\
Expected files   : count_alpha.c\
Allowed functions: write, printf\
--------------------------------------------------------------------------------\
\
\'c9crire un programme count_alpha qui prend une cha\'eene et affiche le nombre d'occurences\
de ses caract\'e8res alphab\'e9tiques. Les autres caract\'e8res ne sont pas compt\'e9s. L'ordre est l'ordre d'apparition dans la cha\'eene.\
L'affichage doit \'eatre termin\'e9 par un newline.\
\
Le format est dans les exemples.\
\
Si le nombre d'arguments n'est pas 1, afficher juste un newline.\
\
Exemples :\
$> ./count_alpha abbcc\
1a, 2b, 2c\
$> ./count_alpha "abbcc"\
1a, 2b, 2c\
$> ./count_alpha "abbcc" "dddeef" | cat -e\
$\
$> ./count_alpha "My Hyze 47y 7." | cat -e\
1m, 3y, 1h, 1z, 1e$\
$> ./count_alpha "" | cat -e\
$\
\
\
Assignment name  : str_maxlenoc\
Expected files   : str_maxlenoc.c\
Allowed functions: write, malloc, free\
--------------------------------------------------------------------------------\
\
\'c9crire un programme qui prend en param\'e8tres n cha\'eenes de caract\'e8res et qui\
affiche, suivie d'un retour \'e0 la ligne, la plus grande cha\'eene de caract\'e8res\
incluse dans toutes les cha\'eenes pass\'e9es en param\'e8tres. Si plusieurs cha\'eenes\
correspondent, on affichera celle qui appara\'eet en premier dans le premier\
param\'e8tre. A noter que "" est forc\'e9ment dans toutes les cha\'eenes.\
\
Si aucun param\'e8tre n'est transmis, le programme doit afficher\
'\\n'.\
\
Soit A et B des cha\'eenes de caracteres. On dit que A\
est inclus dans B si A est une sous-cha\'eene de B ou\
si A et B sont identiques.\
\
Exemples :\
$>./str_maxlenoc ab bac abacabccabcb\
a\
$>./str_maxlenoc bonjour salut bonjour bonjour\
u\
$>./str_maxlenoc xoxAoxo xoxAox  oxAox oxo  A ooxAoxx oxooxo Axo | cat -e\
$\
$>./str_maxlenoc bosdsdfnjodur atehhellosd afkuonjosurafg headfgllosf fghellosag afdfbosnjourafg\
os\
$>./str_maxlenoc | cat -e\
$}